openapi: 3.0.3

info:
  title: WASAPhoto API Specification
  description: |-
      This OpenAPI document describes a set of interfaces to allow a WASAPhoto user to:
      - See a stream of posts
      - Add and remove likes from posts
      - Interact with the posts with comments
      - Allow the author to remove comments
      - Ban and unban other users
      - See their personal profile
      - Set the username
      - Add and remove personal posts
      - Follow and unfollow other users
      - Search for other users
        
  version: "1.0.0"
  contact:
    name: Ionut Radu Barbalata
    email: barbalata.2002688@studenti.uniroma1.it
  
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      
  responses:
    Unauthorized:
      description: The access token is missing or it's expired.
    BadRequest:
      description: The request was not compliant with the documentation (eg. missing fields, etc).
    InternalServerError:
      description: The server encountered an internal error. Further info in server logs
    NotFound:
      description: The requested resource could not be found.
  
  schemas:
    UUID:
      title: Universally Unique Identifier
      description: |
        A random based UUID used to identify UserID, PhotoID, and more.
      type: string
      pattern: "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"
      example: "550e8400-e29b-41d4-a716-446655440001"
      minLength: 36
      maxLength: 36
    
    Username:
      title: Username
      description: |
        Represent a possible name of a User.
      type: string
      pattern: '^[a-zA-Z0-9_.]{3,20}$'
      example: "Ionut_02"
      minLength: 3
      maxLength: 20

    User:
      title: User
      description: User schema
      type: object
      properties: 
        identifier:
          $ref: "#/components/schemas/UUID"
        username:
          $ref: "#/components/schemas/Username"
    
    UserList:
      title: User list
      description: represent a list of users
      type: array
      items:
        $ref: "#/components/schemas/Username"
    
    Photo:
      title: Photo
      type: object
      description: An object that contain the identifier of the photo and the file
      properties:
        id:
          $ref: "#/components/schemas/UUID"
        file:
          description: A binary file that represent the image
          type: string
          format: binary
          minLength: 0
          maxLength: 30_000_000 # 30 MB
    
    LikedPhoto:
      title: Like status
      description: if True then you liked it
      type: boolean
        
    Post:
      title: Post
      type: object
      description: An object that rapresent a post
      properties:
        uploadTime:
          description: Time when was uploaded the post
          type: string
          format: date-time
          example: "2017-07-21T17:32:28Z"

        author:
          $ref: "#/components/schemas/Username"
        
        photo:
          $ref: "#/components/schemas/Photo"
        
        numLikes:
          description: number of likes of the photo
          type: integer
          minimum: 0
        
        numComments:
          description: number of comments of the photo
          type: integer
          minimum: 0
        
        likedPhoto:
          $ref: "#/components/schemas/LikedPhoto"
          
    Posts:
      title: Stream
      type: array
      description: An array of posts
      items:
        $ref: "#/components/schemas/Post"
    
    Profile:
      title: Profile
      type: object
      description: |
        Contain relevant information about a user
          and his history in WasaPhoto
      properties:
        username:
          $ref: "#/components/schemas/Username"
        
        numPhotos:
          description: number of photos of the user
          type: integer
          minimum: 0
        
        numFollowers:
          description: | 
            number of users that follow
            the user with the username
          type: integer
          minimum: 0
        
        numFollowed:
          description: | 
            number of users that the
            user with the username follow
          type: integer
          minimum: 0
        
        following:
          description: |
            true if the user that request the
            profile is following him
          type: boolean
    
    Comment:
      title: Comment
      type: object
      description: | 
        Represent a post's comment including author,
          body and date-time of creation
        
paths:
  /session:
    post:
      tags: ["login"]
      summary: Logs in the user
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Username"
        required: true
        
      responses:
        '201':
          description: User log-in action successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        '400':
          description: Invalid username format
          content:
            application/json:
              schema:
                $ref: "#/components/responses/BadRequest"
        '500': { $ref: '#/components/responses/InternalServerError' }
        
  /users/{username}/stream:
    parameters:
      - name: username
        description: the username of the stream's owner
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/Username"
      - name: from
        description: the number of posts to skip to send
        in: query
        required: false
        schema:
          type: integer
          minimum: 0
          default: 0
      - name: max_quantity
        description: the number of posts to send
        in: query
        required: false
        schema:
          type: integer
          minimum: 1
          maximum: 50
          default: 10
    
    get:
      tags: ["user"]
      operationId: getMyStream
      summary: Get the stream of the user with the username
      description: |
        Return a list containg the posts of the followed users from 
        the user with the username by cronological order and filtering 
        the ones escluded by the query
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Succesfuly returned the user's stream
          content: 
            application/json:
              schema:
                $ref: "#/components/schemas/Posts"
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "404": { $ref: "#/components/responses/NotFound" }
        "500": { $ref: "#/components/responses/InternalServerError" }
      
  /users/{username}/profile/:
    parameters:
      - name: username
        description: The username of the one to get the profile
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/Username"
      
    get:
      tags: ["user"]
      operationId: getUserProfile
      summary: Get the profile information about the 
      description: |
        Get the profile of the user with the username, and
          check if the user who make the request is banned or
          not from the user with the input username
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Succesfuly returned the user's profile
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Profile"
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "404": { $ref: "#/components/responses/NotFound" }
        "500": { $ref: "#/components/responses/InternalServerError" }
    
    put:
      tags: ["user"]
      operationId: setMyUserName
      summary: |
        Replace the current username with the new one
      description: | 
        Replace the current username with the new one 
          if the user that request it have the same
          input username
      security:
        - bearerAuth: []
      requestBody:
        description: |
          The new username of the user.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Username"
      responses:
        "200": 
          description: Username set succesfully
        "400":
          description: |
            The username must contain just alphanumeric
              characters, dots and undercores.
          content:
            application/json:
              schema:
                $ref: "#/components/responses/BadRequest"
        "401": { $ref: "#/components/responses/Unauthorized" }
        "404": { $ref: "#/components/responses/NotFound" }
        "500": { $ref: "#/components/responses/InternalServerError" }
    
          
  /users/{username}/profile/posts:
    parameters:
      - name: username
        description: The username of the one to get the posts
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/Username"
    get:
      tags: ["user"]
      operationId: getUserPosts
      summary: Get the user Posts
      description: | 
        Get the posts of the user and verify if the
          user of this session is banned or not
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Succesfully get the user's posts
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Posts"
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "404": { $ref: "#/components/responses/NotFound" }
        "500": { $ref: "#/components/responses/InternalServerError" }
    post:
      tags: ["post"]
      operationId: uploadPhoto
      summary: Create a new Post
      description: |
        Insert in the username profile a new Post with can be
          available online
      security:
        - bearerAuth: []
      requestBody:
        content: 
          application/json:
            schema:
              title: New post
              type: object
              description: | 
                Contain al the information needed to initialize
                  a post
              properties:
                photo:
                  $ref: "#/components/schemas/Photo"
                desctription:
                  type: string
                  maxLength: 2200
      responses:
        "201": 
          description: Succesfully uploaded a new post
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "404": { $ref: "#/components/responses/NotFound" }
        "500": { $ref: "#/components/responses/InternalServerError" }
  
  /users/{username}/profile/posts/{postId}:
    parameters:
      - name: username
        description: The user's username
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/Username"
      - name: postId
        description: The UUID of the post
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
    
    get:
      tags: ["post"]
      operationId: getPost
      summary: Get the post with the postId
      description: | 
        Get the post of the user and verify if the
          user of this session is banned or not
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Succesfully get the user's post
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "404": { $ref: "#/components/responses/NotFound" }
        "500": { $ref: "#/components/responses/InternalServerError" }
    delete:
      tags: ["post"]
      operationId: deletePhoto
      summary: Delete the post with the postId
      description: | 
        Delete the post of the user and verify if the
          user of this session is the profile owner
      security:
        - bearerAuth: []
      responses:
        "204":
          description: Succesfully deleted the user's post
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": 
          description: | 
            Insufficient permissions to delete the resource.
        "404": { $ref: "#/components/responses/NotFound" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /users/{username}/profile/posts/{postId}/likes:
    parameters:
      - name: username
        description: The user's username
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/Username"
      - name: postId
        description: The UUID of the post
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
    
    get:
      tags: ["post"]
      operationId: getLikes
      summary: Get the users who liked the post
      description: | 
        Get the users who liked the post
      security:
        - bearerAuth: []
      responses:
        "200":
          description: |
            Succesfully get the users that
              liked the post
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserList"
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "404": { $ref: "#/components/responses/NotFound" }
        "500": { $ref: "#/components/responses/InternalServerError" }
  
  /users/{username}/profile/posts/{postId}/likes/{likerId}:
    parameters:
      - name: username
        description: The user's username
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/Username"
      - name: postId
        description: The UUID of the post
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: likerId
        description: The UUID of the user
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
    
    put:
      tags: ["post"]
      operationId: likePhoto
      summary: like the post
      description: | 
        Define a like to the post from user's likerId
      security:
        - bearerAuth: []
      responses:
        "204":
          description: Succesfully saved the like status
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "404": { $ref: "#/components/responses/NotFound" }
        "500": { $ref: "#/components/responses/InternalServerError" }
        
    delete:
      tags: ["post"]
      operationId: unlikePhoto
      summary: unlike the post
      description: | 
        Delete a previous like to the post from user's likerId
      security:
        - bearerAuth: []
      responses:
        "204":
          description: Succesfully deleted the like from the post
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "404": { $ref: "#/components/responses/NotFound" }
        "500": { $ref: "#/components/responses/InternalServerError" }
  
  /users/{username}/profile/posts/{postId}/comments:
    parameters:
      - name: username
        description: The user's username
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/Username"
      - name: postId
        description: The UUID of the post
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
    
    get:
      tags: ["post"]
      operationId: getComments
      summary: Get the comments of the post
      description: | 
        Get the list of comments of a post
      security:
        - bearerAuth: []
      responses:
        "200":
          description: |
            Succesfully get the post's comments
          content:
            application/json:
              schema:
                type: array
                description: | 
                  An array representing the comments in
                    cronological order
                items:
                  $ref: "#/components/schemas/Comment"
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "404": { $ref: "#/components/responses/NotFound" }
        "500": { $ref: "#/components/responses/InternalServerError" }
    
    post:
      tags: ["post"]
      operationId: commentPhoto
      summary: Post a comment in the post
      description: | 
        If authorized post a new comment in the post
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              description: | 
                Represent the content of the comment
              type: string
              minLength: 1
              maxLength: 2200
              
      responses:
        "200":
          description: |
            Succesfully posted the comment
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Comment"
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "404": { $ref: "#/components/responses/NotFound" }
        "500": { $ref: "#/components/responses/InternalServerError" }
                
  /users/{username}/profile/posts/{postId}/comments/{commentId}:
    parameters:
      - name: username
        description: The user's username
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/Username"
      - name: postId
        description: The UUID of the post
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: commentId
        description: The UUID of the comment
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
    
    delete:
      tags: ["post"]
      operationId: uncommentPhoto
      summary: Delete a comment in the post
      description: | 
        If the user is authorized as owner of the post,
          delete the comment in the post
      security:
        - bearerAuth: []
      responses:
        "204":
          description: |
            Succesfully deleted the comment
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "404": { $ref: "#/components/responses/NotFound" }
        "500": { $ref: "#/components/responses/InternalServerError" }