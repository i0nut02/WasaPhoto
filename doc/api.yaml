openapi: 3.0.3

info:
  title: WASAPhoto API Specification
  description: |-
      This OpenAPI document describes a set of interfaces to allow a WASAPhoto user to:
      - See a stream of posts
      - Add and remove likes from posts
      - Interact with the posts with comments
      - Allow the author to remove comments
      - Ban and unban other users
      - See their personal profile
      - Set the username
      - Add and remove personal posts
      - Follow and unfollow other users
      - Search for other users
        
  version: "1.0.0"
  contact:
    name: Ionut Radu Barbalata
    email: barbalata.2002688@studenti.uniroma1.it
  
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
  
  schemas:
    UniversallyUniqueIdentifiers:
      title: Universally Unique Identifier
      description: |
        A random based UUID used to identify UserID, PhotoID, and more.
      type: string
      pattern: "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"
      example: "550e8400-e29b-41d4-a716-446655440001"
      minLength: 36
      maxLength: 36
    
    Username:
      title: Username
      description: |
        Represent a possible name of a User.
      type: object 
      properties:
        username_string:
          description: string of the object
          type: string
          pattern: '^[a-zA-Z0-9_.]{3,20}$'
          example: "Ionut_02"
          minLength: 3
          maxLength: 20
      example:
        username_string: "Jok3r"
    
    UserId:
      title: User Identifier
      description: |
        Represent the Identifier of the user
      type: object
      properties:
        user_id:
          $ref: "#/components/schemas/UniversallyUniqueIdentifiers"
    
    UserList:
      title: User list
      description: represent a list of users
      type: object  
      properties:
        usernames:
          description: list of users
          type: array
          minItems: 0
          maxItems: 2147483647 
          items:
            $ref: "#/components/schemas/Username"
      example:
        usernames:
          - username_string: "Siria96"
          - username_string: "Cicciogamer89"

    Photo:
      title: Photo
      type: object
      description: An object that contain the identifier of the photo and the file
      properties:
        id:
          $ref: "#/components/schemas/UniversallyUniqueIdentifiers"
        file:
          description: A binary file that represent the image
          type: string
          format: binary
          minLength: 0
          maxLength: 30000000 # 30 MB

    PostPrototype:
      title: Prototype post
      type: object
      description: | 
        Contain al the information needed to initialize
        a post
      properties:        
        id:
          $ref: "#/components/schemas/UniversallyUniqueIdentifiers"
        file:
          description: A binary file that represent the image
          type: string
          format: binary
          minLength: 0
          maxLength: 30000000 # 30 MB
        description:
          description: text related to the post
          type: string
          pattern: (.|\n)*
          minLength: 0
          maxLength: 2200
        
    Post:
      title: Post
      type: object
      description: An object that rapresent a post
      properties:
        upload_time:
          description: Time when was uploaded the post
          type: string
          format: date-time
          example: "2017-07-21T17:32:28Z"
        author:
          description: string of the object
          type: string
          pattern: '^[a-zA-Z0-9_.]{3,20}$'
          example: "Ionut_02"
          minLength: 3
          maxLength: 20
        num_likes:
          description: number of likes of the photo
          type: integer
          minimum: 0
        num_comments:
          description: number of comments of the photo
          type: integer
          minimum: 0
        liked_photo:
          description: if True then you liked it
          type: boolean
        photo_id:
          $ref: "#/components/schemas/UniversallyUniqueIdentifiers"
        photo_file:
          description: A binary file that represent the image
          type: string
          format: binary
          minLength: 0
          maxLength: 30000000 # 30 MB
        description: 
          description: text related to the post
          type: string
          pattern: (.|\n)*
          minLength: 0
          maxLength: 2200

      example:
        upload_time: "2023-11-10T10:15:00Z"
        author: "Alice123"
        num_likes: 20
        num_comments: 5
        liked_photo: True
        photo_id: "550e8400-e29b-41d4-a716-446655440001"
        photo_file: "000010101010101"
        description: "it's raining"

          
    PostCollection:
      title: Posts
      description: An array of posts
      type: object
      properties:
        posts:
          description: posts 
          type: array
          minItems: 0
          maxItems: 200
          items:
            $ref: "#/components/schemas/Post"
      example:
        posts:
          - upload_time: "2023-11-10T10:15:00Z"
            author: "Alice123"
            num_likes: 20
            num_comments: 5
            liked_photo: True
            photo_id: "550e8400-e29b-41d4-a716-446655440001"
            photo_file: "000010101010101"
            description: "it's raining"
          - upload_time: "2023-10-10T10:15:00Z"
            author: "Alice123"
            num_likes: 20
            num_comments: 5
            liked_photo: True
            photo_id: "550e8400-e29b-41d4-a716-446655440001"
            photo_file: "000010101010101"
            description: "it's raining"
        
    Profile:
      title: Profile
      type: object
      description: |
        Contain relevant information about a user
          and his history in WasaPhoto
      properties:
        username:
          description: string of the object
          type: string
          pattern: '^[a-zA-Z0-9_.]{3,20}$'
          example: "Ionut_02"
          minLength: 3
          maxLength: 20
        num_photos:
          description: number of photos of the user
          type: integer
          minimum: 0
        num_followers:
          description: | 
            number of users that follow
            the user with the username
          type: integer
          minimum: 0
        num_followed:
          description: | 
            number of users that the
            user with the username follow
          type: integer
          minimum: 0
        following:
          description: |
            true if the user that request the
            profile is following him
          type: boolean
      example:
        username: "Alice123"
        num_photos: 30
        num_followers: 100
        num_followed: 50
        following: true

    CommentContent:
      type: object
      description: | 
        Represent the content of the comment
      properties:
        comment:
          description: the string of the comment
          type: string
          pattern: (.|\n)*
          minLength: 1
          maxLength: 2200
    
    Comment:
      title: Comment
      type: object
      description: | 
        Represent a post's comment including author,
          body and date-time of creation
      properties:
        id: 
          $ref: "#/components/schemas/UniversallyUniqueIdentifiers"

        author: 
          $ref: "#/components/schemas/Username"

        content: 
          $ref: "#/components/schemas/CommentContent"

        upload_time:
          type: string
          format: date-time
          minLength: 20
          maxLength: 20
          description: Date and time when the comment was created
          example: 2020-12-31T23:59:59Z
      example:
        id: "123e4567-e89b-12d3-a456-426614174001"
        author:
          username_string: "Fratino"
        content:
          text: "1vs1"
        upload_time: "2023-11-10T12:30:45Z"
    
    CommentList:
      type: object
      description: An array of comments
      properties:
        comments:
          type: array
          description: | 
            An array representing the comments in
            cronological order
          minItems: 0
          maxItems: 2147483647
          items:
            $ref: "#/components/schemas/Comment"
      example:
        comments:
          - id: "123e4567-e89b-12d3-a456-426614174001"
            author:
              username_string: "Alice123"
            content:
              text: "This is a great post!"
            upload_time: "2023-11-10T12:30:45Z"
          - id: "456e7890-e12c-34d5-b678-901fe2345678"
            author:
              username_string: "Bob456"
            content:
              text: "Thanks for sharing!"
            upload_time: "2023-11-10T13:45:00Z"
    
    Response:
      title: Rersonse
      description: A response message, it contains a code and a message
      type: object
      properties:
        response:
          description: The error message
          type: string
          pattern: (.|\n)*
          minLength: 1
          maxLength: 150
          example: Bad request

        code:
          description: code error
          type: integer
          minimum: 200
          maximum: 599
          example: 400

tags:
  - name: login 
  - name: users
  - name: posts
  - name: followers
  - name: bans
        
paths:
  /session:
    post:
      tags: ["login"]
      summary: Logs in the user
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Username"
        required: true
        
      responses:
        '201':
          description: User log-in action successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserId"
        '400':
          description: Invalid username format
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"

  /users/{username}/stream:
    parameters:
      - name: username
        description: the username of the stream's owner
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/Username"
      - name: from
        description: the number of posts to skip to send
        in: query
        required: false
        schema:
          type: integer
          minimum: 0
          default: 0
      - name: max_quantity
        description: the number of posts to send
        in: query
        required: false
        schema:
          type: integer
          minimum: 1
          maximum: 50
          default: 10
    
    get:
      tags: ["users"]
      operationId: getMyStream
      summary: Get the stream of the user with the username
      description: |
        Return a list containg the posts of the followed users from 
        the user with the username by cronological order and filtering 
        the ones escluded by the query
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Succesfuly returned the user's stream
          content: 
            application/json:
              schema:
                $ref: "#/components/schemas/PostCollection"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
      
  /users/{username}/profile:
    parameters:
      - name: username
        description: The username of the one to get the profile
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/Username"
      
    get:
      tags: ["users"]
      operationId: getUserProfile
      summary: Get the profile information about the 
      description: |
        Get the profile of the user with the username, and
          check if the user who make the request is banned or
          not from the user with the input username
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Succesfuly returned the user's profile
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Profile"        
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"

  /users/{username}/set_username:
    parameters:
      - name: username
        description: The username of the one to get the profile
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/Username"
    put:
      tags: ["users"]
      operationId: setMyUserName
      summary: |
        Replace the current username with the new one
      description: | 
        Replace the current username with the new one 
          if the user that request it have the same
          input username
      security:
        - bearerAuth: []
      requestBody:
        description: |
          The new username of the user.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Username"
      responses:
        "200": 
          description: Username set succesfully
          content:
            application/json:
              schema:
                 $ref: "#/components/schemas/Username"
        "400":
          description: |
            The username must contain just alphanumeric
              characters, dots and undercores.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
          
  /users/{username}/profile/posts:
    parameters:
      - name: username
        description: The username of the one to get the posts
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/Username"
    get:
      tags: ["posts"]
      operationId: getUserPosts
      summary: Get the user Posts
      description: | 
        Get the posts of the user and verify if the
          user of this session is banned or not
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Succesfully get the user's posts
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostCollection"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
    post:
      tags: ["posts"]
      operationId: uploadPhoto
      summary: Create a new Post
      description: |
        Insert in the username profile a new Post with can be
          available online
      security:
        - bearerAuth: []
      requestBody:
        content: 
          application/json:
            schema: 
              $ref: "#/components/schemas/PostPrototype"
      responses:
        "201": 
          description: Succesfully uploaded a new post
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
  
  /users/{username}/profile/posts/{post_id}:
    parameters:
      - name: username
        description: The user's username
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/Username"
      - name: post_id
        description: The UUID of the post
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UniversallyUniqueIdentifiers"
    
    get:
      tags: ["posts"]
      operationId: getPost
      summary: Get the post with the postId
      description: | 
        Get the post of the user and verify if the
          user of this session is banned or not
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Succesfully get the user's post
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
    delete:
      tags: ["posts"]
      operationId: deletePhoto
      summary: Delete the post with the postId
      description: | 
        Delete the post of the user and verify if the
          user of this session is the profile owner
      security:
        - bearerAuth: []
      responses:
        "204":
          description: Succesfully deleted the user's post
        "403": 
          description: | 
            Insufficient permissions to delete the resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"

  /users/{username}/profile/posts/{post_id}/likes:
    parameters:
      - name: username
        description: The user's username
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/Username"
      - name: post_id
        description: The UUID of the post
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UniversallyUniqueIdentifiers"
    
    get:
      tags: ["posts"]
      operationId: getLikes
      summary: Get the users who liked the post
      description: | 
        Get the users who liked the post
      security:
        - bearerAuth: []
      responses:
        "200":
          description: |
            Succesfully get the users that
              liked the post
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserList"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
  
  /users/{username}/profile/posts/{post_id}/likes/{liker_id}:
    parameters:
      - name: username
        description: The user's username
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/Username"
      - name: post_id
        description: The UUID of the post
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UniversallyUniqueIdentifiers"
      - name: liker_id
        description: The UUID of the user
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UniversallyUniqueIdentifiers"
    
    put:
      tags: ["posts"]
      operationId: likePhoto
      summary: like the post
      description: | 
        Define a like to the post from user's likerId
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Succesfully saved the like status
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Username"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
        
    delete:
      tags: ["posts"]
      operationId: unlikePhoto
      summary: unlike the post
      description: | 
        Delete a previous like to the post from user's likerId
      security:
        - bearerAuth: []
      responses:
        "204":
          description: Succesfully deleted the like from the post
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
  
  /users/{username}/profile/posts/{post_id}/comments:
    parameters:
      - name: username
        description: The user's username
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/Username"
      - name: post_id
        description: The UUID of the post
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UniversallyUniqueIdentifiers"
    
    get:
      tags: ["posts"]
      operationId: getComments
      summary: Get the comments of the post
      description: | 
        Get the list of comments of a post
      security:
        - bearerAuth: []
      responses:
        "200":
          description: |
            Succesfully get the post's comments
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/CommentList"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
    
    post:
      tags: ["posts"]
      operationId: commentPhoto
      summary: Post a comment in the post
      description: | 
        If authorized post a new comment in the post
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommentContent"
      responses:
        "201":
          description: |
            Succesfully posted the comment
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Comment"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
                
  /users/{username}/profile/posts/{post_id}/comments/{comment_id}:
    parameters:
      - name: username
        description: The user's username
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/Username"
      - name: post_id
        description: The UUID of the post
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UniversallyUniqueIdentifiers"
      - name: comment_id
        description: The UUID of the comment
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UniversallyUniqueIdentifiers"
    
    delete:
      tags: ["posts"]
      operationId: uncommentPhoto
      summary: Delete a comment in the post
      description: | 
        If the user is authorized as owner of the post,
          delete the comment in the post
      security:
        - bearerAuth: []
      responses:
        "204":
          description: |
            Succesfully deleted the comment
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
  
  /users/{username}/followers:
    parameters:
      - name: username
        in: path
        description: The user's name
        required: true
        schema:
          $ref: "#/components/schemas/Username"
    get:
      tags: ["followers"]
      operationId: getFollowers
      summary: Get a list with the followers
      description: | 
        If authorized get a list of the 
          followers of the username's user
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Succesfully get the followers list
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserList"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
  
  /users/{username}/following:
    parameters:
      - name: username
        in: path
        description: The user's name
        required: true
        schema:
          $ref: "#/components/schemas/Username"
    get:
      tags: ["followers"]
      operationId: getFollowing
      summary: Get a list with the following
      description: | 
        If authorized get a list of the 
          following of the username's user
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Succesfully get the following list
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserList"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
  
  /users/{username}/following/{followed_username}:
    parameters:
      - name: username
        in: path
        description: The user's name
        required: true
        schema:
          $ref: "#/components/schemas/Username"
      - name: followed_username
        in: path
        description: The user to follow/unfollow
        required: true
        schema:
          $ref: "#/components/schemas/Username"
    put:
      tags: ["followers"]
      operationId: followUser
      summary: Follow a user
      description: Follow a user
      security:
        - bearerAuth: []
      responses:
        "200":
          description: The user has been followed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Username"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
    delete:
      tags: ["followers"]
      operationId: unfollowUser
      summary: Unfollow a user
      description: Unfollow a user
      security:
        - bearerAuth: []      
      responses:
        "204":
          description: The user has been unfollowed
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"

  /users/{username}/bans:
    parameters:
      - name: username
        in: path
        description: The user's name
        required: true
        schema:
          $ref: "#/components/schemas/Username"
    get:
      tags: ["bans"]
      operationId: getBans
      summary: Get a list with the banned users
      description: | 
        If authorized get a list of the 
          banned users from the username's user
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Succesfully get the bans list
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserList"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
  
  /users/{username}/bans/{banned_username}:
    parameters:
      - name: username
        in: path
        description: The user's name
        required: true
        schema:
          $ref: "#/components/schemas/Username"
      - name: banned_username
        in: path
        description: The user to follow ban/unban
        required: true
        schema:
          $ref: "#/components/schemas/Username"
    put:
      tags: ["bans"]
      operationId: banUser
      summary: Ban a user
      description: Ban a user
      security:
        - bearerAuth: []
      responses:
        "200":
          description: The user has been banned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Username"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
    delete:
      tags: ["bans"]
      operationId: unbanUser
      summary: Unbun a user
      description: Unban a user
      security:
        - bearerAuth: []      
      responses:
        "204":
          description: The user has been unbanned
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
  
  /users:
    parameters:
      - name: search_term
        in: query
        description: The search term
        required: true
        schema:
          $ref: "#/components/schemas/Username"
    get:
      tags: ["users"]
      operationId: searchUsers
      summary: Get Users with similar input string
      description: Get Users with similar input string
      security:
        - bearerAuth: []
      responses:
        "200":
          description: |
            The list of users that match the search term
          content:
            application/json:
              schema:  
                $ref: "#/components/schemas/UserList"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"